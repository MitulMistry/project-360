generator client {
  provider      = "prisma-client-js"
  // Target rhel-openssl-1.0.x for Vercel deployment, native for current platform
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String             @id @default(cuid())
  createdAt     DateTime           @default(now())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organizations OrganizationUser[]
  tasks         Task[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  name      String?
  members   OrganizationUser[]
  projects  Project[]
}

model OrganizationUser {
  // Delete OrganizationUser if Organization or User are deleted (onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String // relation scalar field (used in the `@relation` attribute above)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String // relation scalar field (used in the `@relation` attribute above)
  joinedAt       DateTime     @default(now())
  role           Role         @default(ASSIGNEE)

  @@id([userId, organizationId])
}

enum Role {
  OWNER
  MANAGER
  ASSIGNEE
}

model Project {
  // Delete Project if Organization is deleted (onDelete: Cascade)
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  name           String
  tasks          Task[]
}

model Task {
  // Delete Task if Project is deleted (onDelete: Cascade)
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String
  assignee          User?     @relation(fields: [assigneeId], references: [id])
  assigneeId        String?
  name              String?
  status            Status    @default(READY)
  priority          Priority  @default(LOW)
  timeEstimate      Int?
  timeEstimateUnits TimeUnits @default(HOURS)
  dueDate           DateTime?
}

enum Status {
  READY
  INPROGRESS
  DONE
  STUCK
}

enum Priority {
  LOW
  MEDIUM
  CRITICAL
  HIGH
}

enum TimeUnits {
  HOURS
  DAYS
  WEEKS
}
